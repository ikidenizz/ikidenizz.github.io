---
layout: post
title: "Python'da Liste ÃœreteÃ§leri"
description: Liste ÃœreteÃ§leri, Python'un en gÃ¼Ã§lÃ¼ ve esnek Ã¶zelliklerinden biridir. Geleneksel dÃ¶ngÃ¼ yapÄ±larÄ±na kÄ±yasla daha kÄ±sa, okunabilir ve genellikle daha hÄ±zlÄ± kod yazmanÄ±za olanak tanÄ±r."
image: /images/describing.jpg
date: 2025-02-02 05:04:34 +0300
category: "Python"
tags: [Comprehensions, Liste, dÃ¶ngÃ¼]
lang: tr
author: isunion99
published: true
---


# **Python'da Liste ÃœreteÃ§leri: GÃ¼Ã§lÃ¼ ve Esnek Liste OluÅŸturma**

## **GiriÅŸ**
Liste ÃœreteÃ§leri, Python'un en gÃ¼Ã§lÃ¼ ve esnek Ã¶zelliklerinden biridir. Geleneksel dÃ¶ngÃ¼ yapÄ±larÄ±na kÄ±yasla daha kÄ±sa, okunabilir ve genellikle daha hÄ±zlÄ± kod yazmanÄ±za olanak tanÄ±r. Bu Ã¶zelliÄŸi Ã¶ÄŸrenmek, Python programcÄ±larÄ± iÃ§in zorunlu bir beceridir.

---

## **Temel SÃ¶zdizimi**
Liste ÃœreteÃ§leri'in genel yapÄ±sÄ± ÅŸu ÅŸekildedir:
```python
[yeni_deÄŸer for eleman in mevcut_liste if koÅŸul]
```

### **SÃ¶zdizimi BileÅŸenleri**
- **`yeni_deÄŸer`:** Her eleman iÃ§in Ã¼retilen veya hesaplanan deÄŸer.
- **`eleman`:** Mevcut listedeki her bir Ã¶ÄŸe.
- **`mevcut_liste`:** Ãœzerinde iÅŸlem yapÄ±lacak kaynak liste.
- **`koÅŸul` (isteÄŸe baÄŸlÄ±):** ElemanlarÄ±n listeye dahil edilmesini kontrol eden filtre.

---

## **Pratik Ã–rnekler**

### **1. Basit Liste OluÅŸturma: SayÄ±larÄ±n Kareleri**
SayÄ±larÄ±n karelerinden oluÅŸan bir liste oluÅŸturalÄ±m.

#### **Klasik YÃ¶ntem**
```python
kareler = []
for i in range(10):
    kareler.append(i**2)
print(kareler)  # Ã‡Ä±ktÄ±: [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
```

#### **Liste Ãœreteci YÃ¶ntemi**
```python
kareler = [i**2 for i in range(10)]
print(kareler)  # Ã‡Ä±ktÄ±: [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
```

**AÃ§Ä±klama:** `range(10)`'dan gelen her `i` deÄŸeri iÃ§in `i**2` hesaplanÄ±r ve listeye eklenir.

---

### **2. KoÅŸullu Liste OluÅŸturma: Ã‡ift SayÄ±lar**
0'dan 9'a kadar olan Ã§ift sayÄ±larÄ± bir liste olarak elde edelim.

#### **Klasik YÃ¶ntem**
```python
ciftler = []
for i in range(10):
    if i % 2 == 0:
        ciftler.append(i)
print(ciftler)  # Ã‡Ä±ktÄ±: [0, 2, 4, 6, 8]
```

#### **Liste Ãœreteci YÃ¶ntemi**
```python
ciftler = [i for i in range(10) if i % 2 == 0]
print(ciftler)  # Ã‡Ä±ktÄ±: [0, 2, 4, 6, 8]
```

**AÃ§Ä±klama:** `if i % 2 == 0` koÅŸulu, sadece Ã§ift sayÄ±larÄ± listeye ekler.


---

### **Kodun ParÃ§alarÄ±nÄ± AdÄ±m AdÄ±m Analiz Edelim**

#### **AdÄ±m 1: `range(10)`**
- `range(10)` fonksiyonu, 0'dan 9'a kadar olan (10 hariÃ§) tam sayÄ±larÄ± Ã¼retir.
- Bu, ÅŸu diziyi temsil eder: `[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]`.

#### **AdÄ±m 2: `for i in range(10)`**
- `for i in range(10)` dÃ¶ngÃ¼sÃ¼, `range(10)`'dan gelen her bir sayÄ±yÄ± sÄ±rasÄ±yla `i` deÄŸiÅŸkenine atar.
- Ã–rneÄŸin, dÃ¶ngÃ¼ Ã¶nce `i = 0`, ardÄ±ndan `i = 1`, sonra `i = 2` ve bu ÅŸekilde devam eder.

#### **AdÄ±m 3: `if i % 2 == 0`**
- `if i % 2 == 0` koÅŸulu, `i`'nin Ã§ift olup olmadÄ±ÄŸÄ±nÄ± kontrol eder.
- `%` operatÃ¶rÃ¼, bir sayÄ±nÄ±n baÅŸka bir sayÄ±ya bÃ¶lÃ¼mÃ¼nden kalanÄ± verir.
  - EÄŸer `i % 2 == 0`, yani `i`'nin 2'ye bÃ¶lÃ¼mÃ¼nden kalan 0 ise, bu demektir ki `i` Ã§ift bir sayÄ±dÄ±r.
- Ã–rneÄŸin:
  - `0 % 2 == 0` â†’ DoÄŸru (0 Ã§ifttir).
  - `1 % 2 == 0` â†’ YanlÄ±ÅŸ (1 tek).
  - `2 % 2 == 0` â†’ DoÄŸru (2 Ã§ifttir).

#### **AdÄ±m 4: `[i for i in range(10) if i % 2 == 0]`**
- Bu ifade, `range(10)`'dan alÄ±nan her `i` deÄŸeri iÃ§in, eÄŸer `i % 2 == 0` koÅŸulu saÄŸlanÄ±yorsa, `i`'yi yeni bir liste iÃ§ine yerleÅŸtirir.
- KoÅŸulu saÄŸlayan sayÄ±lar ÅŸunlardÄ±r: `0, 2, 4, 6, 8`.

#### **AdÄ±m 5: `ciftler = [...]`**
- Yeni oluÅŸturulan liste, `ciftler` adlÄ± bir deÄŸiÅŸkene atanÄ±r.
- SonuÃ§ olarak, `ciftler` ÅŸu hale gelir: `[0, 2, 4, 6, 8]`.

---

### **3. `print(ciftler)`**
- `print(ciftler)` komutu, `ciftler` listesinin iÃ§eriÄŸini ekrana yazdÄ±rÄ±r.
- Ã‡Ä±ktÄ± ÅŸu ÅŸekilde olacaktÄ±r:
```plaintext
[0, 2, 4, 6, 8]
```

---

### **4. Ã–zet**
Bu kod, `range(10)`'dan gelen sayÄ±larÄ± kontrol ederek yalnÄ±zca Ã§ift olanlarÄ±nÄ± bir liste halinde toplar. Liste ÃœreteÃ§leri yapÄ±sÄ±, bu iÅŸlemi tek bir satÄ±rda daha kÄ±sa ve okunabilir bir ÅŸekilde gerÃ§ekleÅŸtirir.

**SonuÃ§:** Kodun Ã§Ä±ktÄ±sÄ±, `[0, 2, 4, 6, 8]` dir. ğŸš€



---

### **3. String Ä°ÅŸleme: Kelime UzunluklarÄ±**
Bir string listesindeki her kelimenin uzunluÄŸunu bulalÄ±m.

#### **Klasik YÃ¶ntem**
```python
kelimeler = ["Python", "programlama", "kolay"]
uzunluklar = []
for kelime in kelimeler:
    uzunluklar.append(len(kelime))
print(uzunluklar)  # Ã‡Ä±ktÄ±: [6, 11, 5]
```

#### **Liste Ãœreteci YÃ¶ntemi**
```python
kelimeler = ["Python", "programlama", "kolay"]
uzunluklar = [len(kelime) for kelime in kelimeler]
print(uzunluklar)  # Ã‡Ä±ktÄ±: [6, 11, 5]
```

**AÃ§Ä±klama:** Her `kelime` iÃ§in `len(kelime)` hesaplanÄ±r ve listeye eklenir.

---

### **4. Ä°Ã§ Ä°Ã§e Liste Ä°ÅŸlemleri: Kartezyen Ã‡arpÄ±m**
Ä°ki farklÄ± listeden elemanlarÄ± birleÅŸtirerek yeni bir liste oluÅŸturalÄ±m.

#### **Klasik YÃ¶ntem**
```python
liste1 = [1, 2, 3]
liste2 = ["a", "b", "c"]
sonuc = []
for x in liste1:
    for y in liste2:
        sonuc.append((x, y))
print(sonuc)  # Ã‡Ä±ktÄ±: [(1, 'a'), (1, 'b'), (1, 'c'), (2, 'a'), ...]
```

#### **Liste Ãœreteci YÃ¶ntemi**
```python
liste1 = [1, 2, 3]
liste2 = ["a", "b", "c"]
sonuc = [(x, y) for x in liste1 for y in liste2]
print(sonuc)  # Ã‡Ä±ktÄ±: [(1, 'a'), (1, 'b'), (1, 'c'), (2, 'a'), ...]
```

**AÃ§Ä±klama:** Ä°ki iÃ§ iÃ§e dÃ¶ngÃ¼yÃ¼ tek bir satÄ±rda ifade ettik.

---

## **GeliÅŸmiÅŸ KullanÄ±mlar**

### **Matris DÃ¶nÃ¼ÅŸÃ¼mleri**
Bir matrisin transpozesini (satÄ±rlarÄ± sÃ¼tunlar haline getirme) alalÄ±m.

```python
# 2x2'lik matrisin transpozunu alma
matris = [[1, 2], [3, 4]]
transpoze = [[satir[j] for satir in matris] for j in range(len(matris[0]))]
print(transpoze)  # Ã‡Ä±ktÄ±: [[1, 3], [2, 4]]
```

**AÃ§Ä±klama:** DÄ±ÅŸtaki comprehension, sÃ¼tun indekslerini (`j`) belirlerken, iÃ§teki comprehension, her sÃ¼tundaki elemanlarÄ± toplar.

---

### **SÃ¶zlÃ¼k DÃ¶nÃ¼ÅŸÃ¼mleri**
Bir sÃ¶zlÃ¼kten belirli bir ÅŸarta uyan anahtarlarÄ± bir liste olarak Ã§Ä±karalÄ±m.

```python
# BaÅŸarÄ±lÄ± Ã¶ÄŸrencileri bulma
ogrenciler = {'Ali': 85, 'AyÅŸe': 92, 'Mehmet': 78}
basarili_ogrenciler = [isim for isim, not_degeri in ogrenciler.items() if not_degeri >= 80]
print(basarili_ogrenciler)  # Ã‡Ä±ktÄ±: ['Ali', 'AyÅŸe']
```

**AÃ§Ä±klama:** `items()` metodunu kullanarak sÃ¶zlÃ¼ÄŸÃ¼n her bir `(key, value)` ikilisini iÅŸleve sokup, belirli bir koÅŸulu kontrol ettik.

---

## **Performans ve En Ä°yi Uygulamalar**

- **Performans:** Liste ÃœreteÃ§leri genellikle geleneksel for dÃ¶ngÃ¼lerinden daha hÄ±zlÄ± Ã§alÄ±ÅŸÄ±r.
- **Okunabilirlik:** KarmaÅŸÄ±k iÅŸlemler iÃ§in aÃ§Ä±k dÃ¶ngÃ¼ler tercih edilebilir.
- **Denge:** Kodunuzu hem performanslÄ± hem de okunabilir hale getirmek iÃ§in denge kurun.

---

## **UyarÄ±lar**
- **KarmaÅŸÄ±k Ifadeler:** Ã‡ok karmaÅŸÄ±k Liste ÃœreteÃ§leri'lar, okunabilirliÄŸi azaltabilir. BÃ¶yle durumlarda, ifadeleri birden fazla satÄ±rda yazmayÄ± dÃ¼ÅŸÃ¼nÃ¼n.
- **Yan Etkiler:** Yan etkisi olan iÅŸlemleri iÃ§eren durumlarda, geleneksel dÃ¶ngÃ¼leri tercih edin.

---

## **SonuÃ§**
Liste ÃœreteÃ§leri, Python'da listeleri iÅŸlemenin gÃ¼Ã§lÃ¼ ve estetik bir yoludur. DoÄŸru kullanÄ±ldÄ±ÄŸÄ±nda, kodunuzu daha kÄ±sa, okunabilir ve performanslÄ± hale getirir. Bu harika Ã¶zelliÄŸin potansiyelini keÅŸfedin ve mutlu kodlamalar! ğŸš€

--- 
![Comprehensions]({{ "/images/describing.jpg" | relative_url }}){:width="650px" height="auto" class="responsive-image centered-image"}

---