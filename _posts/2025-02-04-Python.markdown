---
layout: post
title: "Python Listeler Demetler Sözlükler oluşturmak"
description: "Python Listeler Demetler Sözlükler oluşturmak ve kullanmak için temel adımları açıklayayım"
image: /images/describing.jpg
date: 2025-02-04 05:04:34 +0300
category: "Python"
tags: [Listeler, Demetler]
lang: tr
author: isunion99
published: true
---

Tabii ki! Hadi bunları eğlenceli örneklerle anlatalım:

1. **Lists (Listeler)** 📝

```python
# Listeler sıralı koleksiyonlardır ve köşeli parantez [] ile oluşturulur
okul_cantasi = ["kalem", "defter", "silgi", "cetvel"]
```
Düşün ki okul çantanı hazırlıyorsun. İçine birçok şey koyabilir, çıkarabilir veya değiştirebilirsin:

```python
# Listeye yeni eşya ekleme
okul_cantasi.append("boya kalemi")

# Listeden eşya çıkarma
okul_cantasi.remove("silgi")

# Listedeki bir eşyayı değiştirme
okul_cantasi[0] = "tükenmez kalem"
```

2. **Tuples (Demetler)** 🎁

```python
# Tuplelar parantez () ile oluşturulur ve değiştirilemez
renkler = ("kırmızı", "mavi", "yeşil")
```
Bu bir hediye paketi gibidir. Bir kere paketlendiğinde içindekileri değiştiremezsin:

```python
# Bu hata verecektir
renkler[0] = "sarı"  # TypeError: 'tuple' object does not support item assignment
```

3. **Sets (Kümeler)** 🎯

```python
# Kümeler süslü parantez {} ile oluşturulur ve tekrar eden elemanları almaz
oyuncaklar = {"top", "araba", "bebek", "top"}
print(oyuncaklar)  # {'top', 'araba', 'bebek'}
```
Düşün ki oyuncak kutun var. Aynı oyuncaktan iki tane koysan bile kutu sadece bir tanesini gösterir.

4. **Dictionaries (Sözlükler)** 📚

```python
# Sözlükler anahtar-değer çiftlerinden oluşur
hayvan_sesleri = {
    "kedi": "miyav",
    "köpek": "hav",
    "kuş": "cik"
}
```
Bu bir hayvan sesleri kitabı gibidir. Her hayvanın (anahtar) kendi sesi (değer) vardır:

```python
print(hayvan_sesleri["kedi"])  # "miyav"
```

5. **Comprehension (Anlama)** 🎨
Bu biraz sihir gibidir! Uzun işlemleri tek satırda yapabilirsin:

```python
# List Comprehension
# 1'den 5'e kadar olan sayıların karesini alma
kareler = [sayi * sayi for sayi in range(1, 6)]
print(kareler)  # [1, 4, 9, 16, 25]

# Dictionary Comprehension
# Sayıları ve karelerini sözlüğe ekleme
sayi_kareleri = {sayi: sayi * sayi for sayi in range(1, 4)}
print(sayi_kareleri)  # {1: 1, 2: 4, 3: 9}
```

Pratik Örnekler:

```python
# Liste örneği: Sınıf listesi
sinif = ["Ali", "Ayşe", "Mehmet"]
sinif.append("Zeynep")  # Yeni öğrenci ekleme

# Tuple örneği: Koordinatlar
nokta = (3, 4)  # X ve Y koordinatları

# Set örneği: Sevdiğin meyveler
meyveler = {"elma", "armut", "muz", "elma"}  # İki elma yazsak bile bir tane gösterir

# Dictionary örneği: Öğrenci notları
notlar = {
    "Ali": 85,
    "Ayşe": 90,
    "Mehmet": 75
}

# List comprehension örneği: 1'den 10'a kadar çift sayılar
cift_sayilar = [x for x in range(1, 11) if x % 2 == 0]
print(cift_sayilar)  # [2, 4, 6, 8, 10]
```

Her birinin özel kullanım alanları vardır:
- **Listeler**: Sıralı ve değiştirilebilir veriler için
- **Tuplelar**: Değişmemesi gereken veriler için
- **Setler**: Tekrar etmeyen benzersiz veriler için
- **Sözlükler**: İlişkili verileri eşleştirmek için
- **Comprehension**: Veri işlemlerini kısaca yazmak için

Bu yapıları anlamak Python'da programlama yaparken çok işine yarayacak! 😊

Hadi Generator'ları eğlenceli bir şekilde öğrenelim! 🎮

Önce şöyle düşün: Bir oyuncak fabrikası hayal et. İki çeşit fabrika var:

1. **Normal Fabrika (Normal Liste)**
- Bütün oyuncakları bir kerede üretip depoya koyar
- Çok yer kaplar
- Tüm oyuncakları hemen yapar

2. **Sihirli Fabrika (Generator)**
- Oyuncakları sadece istendiğinde, teker teker üretir
- Çok az yer kaplar
- Oyuncakları lazım oldukça yapar

İşte Generator örneği:

```python
# Normal fabrika (Liste)
def normal_fabrika(n):
    oyuncaklar = []
    for i in range(n):
        oyuncaklar.append(f"Oyuncak {i}")
    return oyuncaklar

# Sihirli fabrika (Generator)
def sihirli_fabrika(n):
    for i in range(n):
        yield f"Oyuncak {i}"

# Farkı görelim
normal = normal_fabrika(1000000)  # Hemen 1 milyon oyuncak üretir
sihirli = sihirli_fabrika(1000000)  # Hiçbir oyuncak üretmez, sadece plan yapar
```

Pratik bir örnek yapalım - Sayı üreteci:

```python
def sayi_uret(baslangic, bitis):
    print(f"{baslangic}'dan başlıyorum!")
    while baslangic <= bitis:
        yield baslangic
        baslangic += 1

# Kullanımı
sayilar = sayi_uret(1, 5)
print("Generator hazır!")

for sayi in sayilar:
    print(sayi)
```

Çıktı:

```
Generator hazır!
1'dan başlıyorum!
1
2
3
4
5
```

Eğlenceli bir örnek daha - Sonsuz şeker makinesi:

```python
def seker_makinesi():
    sekerler = ["🍬", "🍭", "🍫"]
    index = 0
    while True:
        yield sekerler[index]
        index = (index + 1) % len(sekerler)

# Şeker makinemizi kullanalım
makine = seker_makinesi()
for _ in range(6):
    print(next(makine), end=" ")
# Çıktı: 🍬 🍭 🍫 🍬 🍭 🍫
```

Generator'ların güzel özellikleri:
1. **Hafıza dostu**:

```python
# Büyük sayıların karesini almak
def kare_generator(n):
    for i in range(n):
        yield i * i

# Sadece istediğimiz sayının karesini üretir
kareler = kare_generator(1000000)
print(next(kareler))  # 0
print(next(kareler))  # 1
print(next(kareler))  # 4
```

2. **Sonsuz seriler oluşturabilme**:

```python
def fibonacci():
    a, b = 0, 1
    while True:
        yield a
        a, b = b, a + b

# Fibonacci sayılarını oluşturalım
fib = fibonacci()
for _ in range(6):
    print(next(fib), end=" ")
# Çıktı: 0 1 1 2 3 5
```

3. **Duraklatılabilir ve devam ettirilebilir**:

```python
def hikaye_anlatici():
    yield "Bir varmış..."
    yield "Bir yokmuş..."
    yield "Evvel zaman içinde..."
    yield "Kalbur saman içinde..."

hikaye = hikaye_anlatici()
print(next(hikaye))  # "Bir varmış..."
print("Ara veriyoruz!")
print(next(hikaye))  # "Bir yokmuş..."
```

Generator'ları ne zaman kullanmalıyız?
- Çok büyük veri setleriyle çalışırken
- Sonsuz seriler oluştururken
- Bellek kullanımını optimize etmek istediğimizde
- Veriyi parça parça işlememiz gerektiğinde

İşte bu kadar! Generator'lar aslında sihirli bir fabrika gibi, sadece ihtiyacın olduğunda çalışır ve hafızanı çok verimli kullanmanı sağlar. 🌟

Hadi "Functions as first-class objects" konusunu eğlenceli bir şekilde öğrenelim! 🎪

İlk olarak şöyle düşün: Python'da fonksiyonlar sihirli oyuncaklar gibidir. Onları:
1. Başka bir oyuncağa verebilirsin (değişkene atama)
2. Başka bir oyuncak kutusuna koyabilirsin (liste, sözlük vb.)
3. Başka bir oyuncak fabrikasına gönderebilirsin (fonksiyona parametre olarak)
4. Yeni bir oyuncak fabrikasından geri alabilirsin (fonksiyondan dönüş değeri olarak)

Hadi örneklerle görelim:

1. **Fonksiyonu Değişkene Atama**:

```python
def selam_ver(isim):
    return f"Merhaba {isim}!"

# Fonksiyonu bir değişkene atayabiliriz
selamlayici = selam_ver
print(selamlayici("Ali"))  # Çıktı: "Merhaba Ali!"
```

2. **Fonksiyonları Liste/Sözlük İçinde Tutma**:

```python
def toplama(a, b): return a + b
def cikarma(a, b): return a - b
def carpma(a, b): return a * b

# Fonksiyonları listeye koyalım
matematik_kutusu = [toplama, cikarma, carpma]

# Listedeki fonksiyonları kullanma
for islem in matematik_kutusu:
    print(islem(10, 5))  # Çıktı: 15, 5, 50
```

3. **Fonksiyonu Parametre Olarak Gönderme**:

```python
def sayi_uret(islem):
    return islem(5, 3)

def topla(x, y):
    return x + y

def carp(x, y):
    return x * y

print(sayi_uret(topla))  # Çıktı: 8
print(sayi_uret(carp))   # Çıktı: 15
```

4. **Fonksiyondan Fonksiyon Döndürme**:

```python
def matematik_fabrikasi(islem):
    def toplama(x, y):
        return x + y
    
    def carpma(x, y):
        return x * y
    
    if islem == "topla":
        return toplama
    else:
        return carpma

# Fonksiyon üretelim
hesapla = matematik_fabrikasi("topla")
print(hesapla(4, 3))  # Çıktı: 7
```

5. **Dekoratörler (Süsleyiciler)**:

```python
def sihirli_sus(fonksiyon):
    def wrapper():
        print("✨ Sihir başlıyor ✨")
        fonksiyon()
        print("✨ Sihir bitti ✨")
    return wrapper

@sihirli_sus
def selam_ver():
    print("Merhaba!")

selam_ver()
# Çıktı:
# ✨ Sihir başlıyor ✨
# Merhaba!
# ✨ Sihir bitti ✨
```

6. **Lambda Fonksiyonları (Küçük Sihirli Formüller)**:

```python
# Normal fonksiyon
def kare_al(x):
    return x * x

# Aynı işi yapan lambda fonksiyonu
kare = lambda x: x * x

print(kare(5))  # Çıktı: 25
```

7. **Pratik Bir Örnek - Oyun Puanları**:

```python
def puan_hesapla(seviye):
    def kolay_mod(skor):
        return skor * 1
    
    def orta_mod(skor):
        return skor * 2
    
    def zor_mod(skor):
        return skor * 3
    
    if seviye == "kolay":
        return kolay_mod
    elif seviye == "orta":
        return orta_mod
    else:
        return zor_mod

# Oyun modunu seçelim
oyun_modu = puan_hesapla("zor")
print(oyun_modu(100))  # Çıktı: 300
```

8. **Fonksiyonları Filtre Olarak Kullanma**:

```python
sayilar = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

# Çift sayıları bulma
def cift_mi(sayi):
    return sayi % 2 == 0

cift_sayilar = list(filter(cift_mi, sayilar))
print(cift_sayilar)  # Çıktı: [2, 4, 6, 8, 10]
```

Bu özellikler sayesinde Python'da:
- Daha esnek kod yazabilirsin
- Kodunu daha düzenli hale getirebilirsin
- Aynı kodu tekrar tekrar yazmaktan kurtulabilirsin
- Karmaşık problemleri daha basit parçalara bölebilirsin

İşte bu kadar! Python'da fonksiyonlar birer süper kahraman gibi - istediğin yere gönderebilir, istediğin şekilde kullanabilir ve hatta yeni süper kahramanlar yaratabilirsin! 🦸‍♂️✨

F-strings'i, sihirli bir not defteri gibi düşünelim! 📝 Hadi öğrenelim:

```python
# Eski yöntem (sıkıcı):
isim = "Ali"
yas = 10
print("Merhaba, benim adım " + isim + " ve " + str(yas) + " yaşındayım.")

# f-string (eğlenceli!):
print(f"Merhaba, benim adım {isim} ve {yas} yaşındayım!")
```

F-strings ile yapabileceklerimiz:

1. **Basit Değişkenleri Kullanma** 🎈

```python
kedi = "Pamuk"
yas = 3
print(f"Benim kedimin adı {kedi} ve {yas} yaşında!")
```

2. **Hesaplama Yapma** ✨

```python
fiyat = 10
adet = 3
print(f"Toplam ödemeniz gereken: {fiyat * adet} TL")
```

3. **Sayıları Biçimlendirme** 🔢

```python
pi = 3.14159
print(f"Pi sayısı: {pi:.2f}")  # İki basamak göster
para = 1234567
print(f"Param: {para:,} TL")   # Binlik ayraç kullan
```

4. **Listeleri Kullanma** 📋

```python
meyveler = ["elma", "armut", "muz"]
print(f"En sevdiğim meyve: {meyveler[0]}")
```

5. **İfadeleri Kullanma** 🎯

```python
puan = 85
print(f"Sınav sonucun: {puan} - {'Geçtin!' if puan >= 70 else 'Kaldın!'}")
```

6. **Sözlükleri Kullanma** 📚

```python
ogrenci = {
    "ad": "Ayşe",
    "sinif": "4-A"
}
print(f"{ogrenci['ad']} {ogrenci['sinif']} sınıfında!")
```

7. **Eğlenceli Örnekler** 🎨

```python
# Karne notu hesaplama
matematik = 90
turkce = 85
fen = 95

print(f"""
🌟 KARNEM 🌟
-----------------
Matematik: {matematik}
Türkçe: {turkce}
Fen: {fen}
-----------------
Ortalama: {(matematik + turkce + fen) / 3:.1f}
""")
```

8. **Emoji ve Özel Karakterler** 🎪
```python
mutlu = True
print(f"Bugün nasılım: {'😊' if mutlu else '😢'}")
```

9. **Alıştırmalar** 🎮

```python
# Oyuncak mağazası
oyuncak = "Araba"
fiyat = 50
stok = 3

print(f"""
🎁 OYUNCAK MAĞAZASI 🎁
----------------------
Oyuncak: {oyuncak}
Fiyat: {fiyat} TL
Stok: {stok} adet
Toplam Değer: {fiyat * stok} TL
""")
```

10. **Küçük Püf Noktaları** 💡

```python
# Süslü parantez yazdırmak için iki tane kullan
print(f"Süslü parantez böyle yazılır: {{ve böyle}}")

# Uzun sayıları daha okunaklı yapma
buyuk_sayi = 1_000_000
print(f"Bir milyon = {buyuk_sayi:,}")
```

F-strings'in güzel yanları:
- Kolay okunur 👀
- Yazması eğlencelidir 🎨
- Hata yapma olasılığı azdır ✅
- Kodunuz daha düzenli görünür 📝

Ve işte bu kadar! F-strings ile metin yazmak, sihirli bir not defterine yazmak gibi - istediğin her şeyi süslü parantezler içine koyup kullanabilirsin! 🌈✨


Python öğrenmek için temel ve ileri düzey konuları şöyle sıralayabilirim:

1. **Temel Konular** 🌱

```python
# Değişkenler ve Veri Tipleri
isim = "Ali"  # str
yas = 25      # int
boy = 1.78    # float
aktif = True  # bool

# Operatörler
x = 5 + 3  # Aritmetik
y = x > 3  # Karşılaştırma
z = True and False  # Mantıksal
```

2. **Veri Yapıları** 📚

```python
liste = [1, 2, 3]
demet = (1, 2, 3)
sozluk = {"a": 1, "b": 2}
kume = {1, 2, 3}
```

3. **Döngüler ve Koşullar** 🔄

- if, elif, else
- for döngüleri
- while döngüleri
- break, continue, pass

4. **Hata Yönetimi** ⚠️

```python
try:
    sayi = int("abc")
except ValueError:
    print("Hata oluştu!")
finally:
    print("İşlem tamamlandı")
```

5. **Dosya İşlemleri** 📁

```python
# Dosya okuma-yazma
with open("dosya.txt", "r") as f:
    icerik = f.read()
```

6. **Modüller ve Paketler** 📦

- import kullanımı
- pip ile paket yönetimi
- kendi modüllerimizi oluşturma

7. **OOP (Nesne Yönelimli Programlama)** 🎯

```python
class Araba:
    def __init__(self, marka):
        self.marka = marka
```

8. **Dekoratörler** 🎨

```python
@decorator
def fonksiyon():
    pass
```

9. **Context Managers** 🔑

```python
with something() as s:
    s.do_something()
```

10. **Async Programming** ⚡

```python
async def main():
    await fonksiyon()
```

11. **Regular Expressions** 🔍

```python
import re
pattern = r"\d+"
```

12. **Database İşlemleri** 💾

- SQLite
- PostgreSQL
- MongoDB

13. **Web Geliştirme** 🌐

- Flask
- Django
- FastAPI

14. **Testing** 🧪

```python
import unittest
class TestClass(unittest.TestCase):
    def test_something(self):
        pass
```

15. **Data Science Araçları** 📊

- NumPy
- Pandas
- Matplotlib

16. **Lambda Functions** λ
```python
square = lambda x: x**2
```

17. **İteratörler ve Jeneratörler** 🔄

```python
def generator():
    yield 1
    yield 2
```

18. **Threading ve Multiprocessing** 🧵

```python
import threading
import multiprocessing
```

19. **Python Design Patterns** 🏗️
- Singleton
- Factory
- Observer

20. **Debugging Teknikleri** 🐛

```python
import pdb
pdb.set_trace()
```

21. **Virtual Environments** 🌍

```bash
python -m venv myenv
source myenv/bin/activate
```

22. **Type Hints** ✍️

```python
def greet(name: str) -> str:
    return f"Hello {name}"
```

23. **Memory Management** 💡

- Garbage collection
- Memory profiling

24. **Security Best Practices** 🔒

- Input validation
- Secure coding practices

25. **Performance Optimization** ⚡

- Profiling
- Code optimization techniques

Her biri için pratik projeler yaparak öğrenmeyi pekiştirmek önemli! Örneğin:

- To-do list uygulaması
- Basit bir blog
- API servisi
- Veri analizi projesi
- Oyun (Örn: Taş-Kağıt-Makas)
- Dosya organizasyon scripti
- Web scraping uygulaması
- Chat uygulaması

Bu konuları sırayla öğrenmek ve her birini projelerle pekiştirmek, Python'da sağlam bir temel oluşturmana yardımcı olacaktır! 🚀


---